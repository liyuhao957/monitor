api_settings:
  deepseek_api_key: sk-33c4b6f409f149cf89139fb4c4900439
  deepseek_base_url: https://api.deepseek.com
  deepseek_model: deepseek-chat
  openai_api_key: sk-6KwYGpsonYqWBAxrg9hEyjfEL7Bpak478TjuxCA7gf52GdvGVDfQ
  openai_base_url: https://api.oaipro.com/v1
  openai_model: claude-sonnet-4-20250514
  ai_provider: openai
default_notification:
  enabled: true
  telegram:
    enabled: false
    bot_token: null
    chat_id: null
  feishu:
    enabled: true
    webhook: https://open.feishu.cn/open-apis/bot/v2/hook/2e9f09a8-4cec-4475-a6a8-4da61c4a874c
tasks:
- name: 华为快应用加载器监控
  url: https://developer.huawei.com/consumer/cn/doc/Tools-Library/quickapp-ide-download-0000001101172926
  frequency: 1m
  rule: xpath://*[@id="ZH-CN_TOPIC_0000001101172926__li16222518142"]
  enabled: true
  screenshot: false
  notification_title: 华为
  notification: null
  storage_strategy: file
  ai_analysis_enabled: true
  ai_description: 我想监控华为快应用加载器的最新版本更新,当最新版本号发生变化时（如从V15.1.1.301变为V15.2.1.305），请生成一个合适的飞书通知，包含：版本号（V15.1.1.301类似这样）、规范版本（类似1121）、发现时间、下载地址。通知格式要求：包含emoji、简洁美观。
  ai_extraction_rules:
    version: css:li a::text
    spec_version: xpath://li//text()[contains(.,'支持')][contains(.,'规范')]
    download_url: css:li a::attr(href)
  ai_formatter_code: "def format_notification(extracted_data: dict, task_info: dict) -> str:\n    try:\n        version = extracted_data.get('version', '未知版本')\n        spec_version = extracted_data.get('spec_version', '未知规范')\n        download_url = extracted_data.get('download_url', '')\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # 构建通知内容\n        notification = f\"\"\"\U0001F680 **华为快应用加载器更新通知**\n\n\U0001F4F1 **最新版本**: {version}\n\U0001F4CB **规范版本**: {spec_version}\n⏰ **发现时间**: {current_time}\n\U0001F4E5 **下载地址**: [点击下载]({download_url})\n\n\U0001F4A1 *监控任务*: {task_info.get('name', '华为快应用加载器监控')}\"\"\"\n\n        return notification\n\n    except Exception as e:\n        return f\"❌ 通知生成失败: {str(e)}\""
- name: 荣耀调试器
  url: https://developer.honor.com/cn/doc/guides/101380
  frequency: 1m
  rule: xpath://*[@id="doc-content-text"]/div[2]/table/tbody/tr[2]
  enabled: true
  screenshot: false
  notification_title: 荣耀
  notification: null
  storage_strategy: file
  ai_analysis_enabled: true
  ai_description: 我只想监控荣耀加载器的最新版本更新。当最新版本号发生变化时（如从V15.1.1.301变为V15.2.1.305），请生成一个适用于飞书的通知格式，包含：荣耀快应用引擎版本号、荣耀引擎版本号、快应用联盟平台版本号、下载地址、调试器版本号、版本功能、检测时间。通知格式要求：包含emoji、简洁美观、版本功能需要排版
  ai_extraction_rules:
    honor_engine_version: css:td:nth-child(1) div
    honor_core_version: css:td:nth-child(2) div div
    quickapp_platform_version: css:td:nth-child(3) p span
    download_url: css:td:nth-child(4) a::attr(href)
    debugger_version: css:td:nth-child(5) div div div span
    version_features: css:td:nth-child(6) p
  ai_formatter_code: "def format_notification(extracted_data: dict, task_info: dict) -> str:\n    try:\n        honor_engine_version = extracted_data.get('honor_engine_version', '未知')\n        honor_core_version = extracted_data.get('honor_core_version', '未知')\n        quickapp_platform_version = extracted_data.get('quickapp_platform_version', '未知')\n        download_url = extracted_data.get('download_url', '')\n        debugger_version = extracted_data.get('debugger_version', '未知')\n        version_features = extracted_data.get('version_features', '暂无说明')\n\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # 格式化版本功能,添加适当的换行和缩进\n        formatted_features = version_features.replace('；', '\\n• ').replace(';', '\\n• ')\n        if not formatted_features.startswith('• '):\n            formatted_features = '• ' + formatted_features\n\n        notification = f\"\"\"\U0001F680 **荣耀调试器版本更新通知**\n\n\U0001F4F1 **版本信息**\n• 荣耀快应用引擎版本:`{honor_engine_version}`\n• 荣耀引擎版本:`{honor_core_version}`\n• 快应用联盟平台版本:`{quickapp_platform_version}`\n• 调试器版本:`{debugger_version}`\n\n\U0001F4E5 **下载地址**\n[点击下载最新版本]({download_url})\n\n✨ **版本功能**\n{formatted_features}\n\n\U0001F550 **检测时间**:{current_time}\n\n\U0001F4A1 *荣耀调试器监控 - 自动检测版本更新*\"\"\"\n\n        return notification\n\n    except Exception as e:\n        return f\"❌ 生成通知失败:{str(e)}\""
- name: OPPO
  url: https://ie-activity-cn.heytapimage.com/static/minigame/CN/docs/index.html#/download/index
  frequency: 1m
  rule: xpath://*[@id="main"]/ul[1]
  enabled: true
  screenshot: false
  notification_title: OPPO快游戏
  notification: null
  storage_strategy: file
  ai_analysis_enabled: true
  ai_description: 我只想监控OPPO小游戏调试器的最新版本更新。V9.8.0这样的是小版本号，1155这样的是大版本号，当最新版本号发生变化时（如从OPPO 小游戏调试器 V9.8.0变为OPPO 小游戏调试器 V9.0.0 和 1155变为1166），请生成一个适用飞书的通知，包含：OPPO引擎大版本号、OPPO引擎小版本号、下载地址、检测时间。通知格式要求：包含emoji、简洁美观。
  ai_extraction_rules:
    major_version: css:ul li:first-child code
    full_version_text: css:ul li:first-child a
    download_url: css:ul li:first-child a::attr(href)
  ai_formatter_code: "def format_notification(extracted_data: dict, task_info: dict) -> str:\n\n    try:\n        # 获取基础数据\n        major_version = extracted_data.get('major_version', '未知')\n        full_version_text = extracted_data.get('full_version_text', '')\n        download_url = extracted_data.get('download_url', '')\n\n        # 从完整版本文本中提取小版本号\n        minor_version = '未知'\n        if full_version_text:\n            # 使用正则表达式提取 V 后面的版本号\n            version_match = re.search(r'V(\\d+\\.\\d+\\.\\d+)', full_version_text)\n            if version_match:\n                minor_version = f\"V{version_match.group(1)}\"\n\n        # 获取当前时间\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # 构建通知内容\n        notification = f\"\"\"\U0001F3AE **OPPO小游戏调试器版本更新**\n\n\U0001F4E6 **版本信息**\n• **大版本号**: `{major_version}`\n• **小版本号**: `{minor_version}`\n\n\U0001F517 **下载地址**\n[点击下载最新版本]({download_url})\n\n⏰ **检测时间**: {current_time}\n\n\U0001F4A1 监控任务: {task_info.get('name', 'OPPO')}\"\"\"\n\n        return notification\n\n    except Exception as e:\n        # 异常处理,返回基础通知\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        return f\"\"\"\U0001F3AE **OPPO小游戏调试器更新检测**\n\n⚠️ 数据提取异常,请检查页面结构变化\n\n⏰ **检测时间**: {current_time}\n\U0001F4A1 **监控任务**: {task_info.get('name', 'OPPO')}\"\"\""
- name: 华为快应用引擎更新说明
  url: https://developer.huawei.com/consumer/cn/doc/quickApp-Guides/quickapp-version-updates-0000001079803874
  frequency: 1m
  rule: xpath://*[@id="body0000001079803874"]
  enabled: true
  screenshot: false
  notification_title: 华为快应用引擎更新说明
  notification: null
  storage_strategy: file
  ai_analysis_enabled: true
  ai_description: '我想监控华为快应用引擎的版本更新说明，当最新版本号发生变化时（如从1121版本变为1122版本），请生成一个合适的飞书通知，包含：


    1. **版本号**：从版本标题中提取（如从"1121版本更新说明（2025-6-6）"中提取"1121"）

    2. **更新内容**：提取最新版本区块内所有表格的"说明"列内容，包括变更描述和参考链接

    3. **文档链接**：提取说明列中的相关文档链接

    4. **检测时间**：当前检测时间


    通知格式要求：包含emoji、更新内容分条目显示并美观换行、简洁美观。'
  ai_extraction_rules:
    version_title: css:div[id="body0000001079803874"] h2:first-of-type
    update_contents: css:div[id="body0000001079803874"] h2:first-of-type ~ div table tbody tr td:nth-child(2)
    doc_links: css:div[id="body0000001079803874"] h2:first-of-type ~ div table tbody tr td:nth-child(2) a::attr(href)
  ai_formatter_code: "def format_notification(extracted_data: dict, task_info: dict) -> str:\n\n    try:\n        # 获取基础数据\n        version_title = extracted_data.get('version_title', '未知版本')\n        update_contents = extracted_data.get('update_contents', [])\n        doc_links = extracted_data.get('doc_links', [])\n\n        # 提取版本号\n        version_number = '未知'\n        if version_title:\n            version_match = re.search(r'(\\d+)版本更新说明', version_title)\n            if version_match:\n                version_number = version_match.group(1)\n\n        # 提取发布时间\n        publish_date = '未知时间'\n        if version_title:\n            date_match = re.search(r'(([^)]+))', version_title)\n            if date_match:\n                publish_date = date_match.group(1)\n\n        # 处理更新内容\n        formatted_contents = []\n        if update_contents:\n            for i, content in enumerate(update_contents[:10]):  # 限制显示条数\n                if content and content.strip():\n                    # 清理内容,移除多余空白\n                    clean_content = re.sub(r'\\s+', ' ', content.strip())\n                    # 截断过长内容\n                    if len(clean_content) > 200:\n                        clean_content = clean_content[:200] + '...'\n                    formatted_contents.append(f\"• {clean_content}\")\n\n        if not formatted_contents:\n            formatted_contents = ['• 暂无详细更新内容']\n\n        # 处理文档链接\n        unique_links = []\n        if doc_links:\n            seen_links = set()\n            for link in doc_links:\n                if link and link.strip() and link not in seen_links:\n                    seen_links.add(link)\n                    # 确保链接完整\n                    if not link.startswith('http'):\n                        link = 'https://developer.huawei.com' + link if link.startswith('/') else link\n                    unique_links.append(link)\n\n        # 获取检测时间\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # 构建通知内容\n        notification = f\"\"\"\U0001F680 **华为快应用引擎版本更新通知**\n\n\U0001F4CB **版本信息**\n• **版本号**: {version_number}\n• **发布时间**: {publish_date}\n• **检测时间**: {current_time}\n\n\U0001F4DD **更新内容**\n{chr(10).join(formatted_contents)}\n\n\U0001F517 **相关文档链接**\"\"\"\n\n        if unique_links:\n            for i, link in enumerate(unique_links[:5], 1):  # 最多显示5个链接\n                notification += f\"\\n{i}. {link}\"\n        else:\n            notification += \"\\n• 暂无相关文档链接\"\n\n        notification += f\"\"\"\n\n\U0001F4A1 监控任务: {task_info.get('name', '华为快应用引擎更新说明')}\n⏰ 检测时间: {current_time}\"\"\"\n\n        return notification\n\n    except Exception as e:\n        # 异常处理,返回基础通知\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        return f\"\"\"\U0001F680 **华为快应用引擎版本更新通知**\n\n⚠️ **数据解析异常**\n检测到华为快应用引擎可能有更新,但数据解析出现问题.\n\n\n\U0001F4A1 监控任务: {task_info.get('name', '华为快应用引擎更新说明')}\n⏰ 检测时间: {current_time}\n\n请手动检查更新内容.\"\"\""
